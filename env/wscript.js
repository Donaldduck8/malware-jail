/*
    wscript.js - simulates WScript (Windows scripting host) environment
*/

util_log("Preparing sandbox to emulate WScript environment.");
_wscript_saved_files = {};
_wscript_urls = [];
_wscript_objects = [];

var Date = _date;

var Base64 = {
    // Source: http://jsfiddle.net/gabrieleromanato/qaght/
    // and: http://stackoverflow.com/questions/246801/how-can-you-encode-a-string-to-base64-in-javascript#246813

    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    encode: function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    decode: function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    _utf8_encode: function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    _utf8_decode: function(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            } else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }

};

TextStream = function(filename) {
    this.id = id++;
    this._name = "TextStream[" + this.id + "]";
    this._filename = filename;
    this._content = "";
    util_log(this._name + " created.");
    this.WriteLine = function(s) {
        util_log(this._name + ".WriteLine(...)");
        this._content += s;
        _wscript_saved_files[this._filename] = this._content;
    }
    this.Write = function(s) {
        util_log(this._name + ".Write(" + s + ")");
        this._content += s;
        _wscript_saved_files[this._filename] = this._content;
    }
    this.ReadAll = function() {
        util_log(this._name + ".ReadAll()");
        return "readall";
    }
    this.Close = function() {
        util_log(this._name + ".Close()");
    }
};

FileSystemObject = function() {
    this.id = id++;
    this._name = "Scripting.FileSystemObject[" + this.id + "]";
    util_log(this._name + " created.");
    this.CreateTextFile = function(filename) { //(filename[, overwrite[, unicode]])
        util_log(this._name + ".CreateTextFile(" + filename + ")");
        return new TextStream(filename);
    }
    this.OpenTextFile = function(filename) { //(filename[, iomode[, create[, format]]])
        util_log(this._name + ".OpenTextFile(" + filename + ")");
        return new TextStream(filename);
    }
    this.GetFileVersion = function(f) {
        util_log(this._name + ".GetFileVersion(" + f + ")");
        return "1.0";
    }
    this.BuildPath = function() {
        util_log(this._name + ".BuildPath(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        return Array.prototype.slice.call(arguments, 0).join("\\");
    }
    this.FileExists = function(f) {
        util_log(this._name + ".FileExists(" + f + ")");
        return true;
    }
    this.DeleteFile = function(f) {
        util_log(this._name + ".DeleteFile(" + f + ")");
        return true;
    }
    this.deleteFile = this.DeleteFile;
    this.GetSpecialFolder = function(f) {
        util_log(this._name + ".GetSpecialFolder(" + f + ")");
        return "Special_Folder__"+f;
    }
    this.GetTempName = function() {
        util_log(this._name + ".GetTempName()");
        return "Temp_name";
    }

};

WScript = {
    _name: "WScript",
    CreateObject: function(a) {
        util_log("WScript.CreateObject(" + a + ")");
        return create_object(a);
    },
    Sleep: function(a) {
        util_log("WScript.Sleep(" + a + ")");
    },
    Echo: function(a) {
        util_log("WScript.Echo(" + a + ")");
    },
    Quit: function(a) {
        util_log("WScript.Quit(" + a + ")");
    },
    Version: "5.812",
    ScriptFullName: "script_full_name.js"
}

function create_object(a) {
    var ret = null;
    if (a.startsWith("WinHttp.WinHttpRequest") ||
        a.startsWith("MSXML2.ServerXMLHTTP")) {
        ret = new MSXML2_XMLHTTP();
    } else if (a.startsWith("Msxml2.DOMDocument")) {
        ret = new Msxml2_DOMDocument_6_0();
    } else {
        switch (a) {
            case "Shell.Application":
                ret = new Shell_Application();
                break;
            case "Scripting.FileSystemObject":
                ret = new FileSystemObject();
                break;
            case "WScript.Shell":
                ret = new WScript_Shell();
                break;
            case "ADODB.Stream":
                ret = new ADODB_Stream();
                break;
            case "MSXML2.XMLHTTP":
                ret = new MSXML2_XMLHTTP();
                break;
            case "Scripting.Dictionary":
                ret = new Scripting_Dictionary();
                break;
            default:
                util_log("Error: type '" + a + "' is not handled");
                ret = null;
                break;
        }
    }
    _wscript_objects[_wscript_objects.length] = ret;
    return ret;
}

Scripting_Dictionary = function() {
    this.id = id++;
    this._name = "Scripting.Dictionary[" + this.id + "]";
    util_log("Created: " + this._name);
    this._dict = {};
    this.add = function(a, b) {
        util_log(this._name + ".add(" + a + ", " + b + ")");
        this._dict[a] = b;
    }
    this.Item = function(a) {
        util_log(this._name + ".Item(" + a + ")");
        return this._dict[a];
    }
}

ActiveXObject = function(a) {
    util_log("ActiveXObject(" + a + ")");
    return create_object(a);
};

Shell_Application = function() {
    this.id = id++;
    this._name = "Shell.Application[" + this.id + "]";
    util_log("Created: " + this._name);
    this.Namespace = function(a) {
        util_log(this._name + ".Namespace(" + a + ")");
    }
}

WScript_Shell = function() {
    this.id = id++;
    this._name = "WScript.Shell[" + this.id + "]";
    util_log("Created: " + this._name);
    this.ExpandEnvironmentStrings = function(a) {
        util_log(this._name + ".ExpandEnvironmentStrings(" + a + ")");
        return a;
    };
    this.Run = function(a, b, c) {
        util_log(this._name + ".Run(" + a + ", " + b + ", " + c + ")");
    }
    this.Exec = function(a) {
        util_log(this._name + ".Exec(" + a + ")");
    }
    this.RegWrite = function(a, b, c) {
        util_log(this._name + ".RegWrite(" + a + ", " + b + ", " + c + ")");
    }
    this.RegRead = function(a) {
        util_log(this._name + ".RegRead(" + a + ")");
        return "regread";
    }
    this.Environment = function(a) {
        util_log(this._name + ".Environment(" + a + ")");
        return new WshEnvironment(a);
    }
    this.run = this.Run;
};
Shell = WScript_Shell;

WshEnvironment = function(a) {
    this.id = id++;
    this._type = a;
    this._name = "WshEnvironment[" + this.id + "](" + this._type + ")";
    util_log("Created: " + this._name);
    this.Item = function(a) {
        util_log(this._name + ".Item(" + a + ")");
        return "itemvalue";
    }
};

ADODB_Stream = function() {
    this.id = id++;
    this._name = "ADODB_Stream[" + this.id + "]";
    util_log("Created: " + this._name);

    this.Open = function() {
        util_log(this._name + ".Open()");
    }
    this.open = this.Open;
    this._type = 0;
    this._position = 0;
    this._size = 0;
    this._content = '';
    this._charset = '';

    this.Write = function(a) {
        this.content = a;
        if (typeof a === 'undefined')
            util_log(this._name + ".Write(undefined) - Error ?");
        else {
            util_log(this._name + ".Write(str) - " + a.length + " bytes");
            this.size = a.length
        }
    }
    this.write = this.Write;
    this.WriteText = function(a) {
        var encoding = 'binary'
        if (typeof a === 'undefined')
            util_log(this._name + ".WriteText(undefined) - Error ?");
        else {
            if (this.type == 2 && this.charset.length > 0) {
                this.content = _iconv.encode(a, this.charset);
                encoding = this.charset;
            } else {
                this.content = a;
            }
            util_log(this._name + ".WriteText(str) - " + a.length + " bytes, encoding: "+encoding);
            this.size = this.content.length
        }
    }
    this.writeText = this.WriteText;
    this.SaveToFile = function(a, b) {
        util_log(this._name + ".SaveToFile(" + a + ", " + b + ")");
        _wscript_saved_files[a] = this.content;
    }
    this.saveToFile = this.SaveToFile;
    this.LoadFromFile = function(a) {
        var encoding = 'binary';
        //util_log(this._name + ".LoadFromFile(" + a + ")");
        if (this.type == 2 && this.charset.length > 0) {
            this.content = _iconv.decode(_wscript_saved_files[a], this.charset);
            encoding = this.charset;
        } else {
            this.content =  _wscript_saved_files[a];
        }
        util_log(this._name + ".LoadFromFile(" + a + ") " + this.content.length + " bytes, encoding: "+encoding);
        this.Position = 0;
    }
    this.loadFromFile = this.LoadFromFile;
    //this.ReadText = function(a) {
    //    util_log(this._name + ".ReadText(" + a + ")");
    //    if (typeof a === "undefined" || a == adReadAll) {
    //        return "aa";
    //    } else if (a == adReadLine) {
    //        return "aa";
    //    } else if (a > 0) {
    //        return this.content.slice(this.Position, this.Position+a);
    //    } else {
    //        return this.content;
    //    }
    //}
    //this.readText = this.ReadText;
    this.Close = function() {
        util_log(this._name + ".Close()");
    }
    this.close = this.Close;
    _defineSingleProperty(this, "Charset", "_charset");
    _defineSingleProperty(this, "charset", "_charset");
    _defineSingleProperty(this, "ReadText", "_content");
    _defineSingleProperty(this, "content", "_content");
    _defineSingleProperty(this, "Content", "_content");
    _defineSingleProperty(this, "Type", "_type");
    _defineSingleProperty(this, "type", "_type");
    _defineSingleProperty(this, "Position", "_position");
    _defineSingleProperty(this, "position", "_position");
    _defineSingleProperty(this, "Size", "_size");
    _defineSingleProperty(this, "size", "_size");

};

Msxml2_DOMDocument_6_0 = function() {
    this.id = id++;
    this._name = "Msxml2.DOMDocument.6.0[" + this.id + "]";
    util_log("Created: " + this._name);
    this.createElement = function(a) {
        util_log(this._name + ".createElement(" + a + ")");
        return new Element(a);
    }
};

MSXML2_XMLHTTP = function() {
    this.id = id++;
    this._name = "MSXML2.XMLHTTP[" + this.id + "]";
    var xhr = new _XMLHttpRequest();
    util_log("Created: " + this._name);
    var self = this;
    this._status = 0;

    xhr.onreadystatechange = (function(that) {
        return function() {
            var len = (xhr.responseText && xhr.responseText.length)?xhr.responseText.length:0;
            util_log(that._name + ".onreadystatechange(), readyState = " + xhr.readyState + " length: " +
                 len + " status: " + xhr.status);
            util_log(that._name + " statusText = " + JSON.stringify(xhr.statusText));
            that.readyState = xhr.readyState;
            that.responseBody = xhr.responseText;
            that.status = xhr.status;
            that.statusText = xhr.statusText;
            if (that.onreadystatechange) {
                that.onreadystatechange();
                util_log(that._name + ".onreadystatechange() finished");
            } else {
                util_log(that._name + ".onreadystatechange() undefined");
            }
        }
    })(this)

    this.open = function(m, u, a) {
        u = u.replace(/\r|\n/g, "");
        util_log(this._name + ".open(" + m + "," + u + "," + a + ")");
        _wscript_urls[_wscript_urls.length] = u;
        xhr.open(m, u, a);
    }
    this.close = function() {
        util_log(this._name + ".close()");
        xhr.close();
    }
    this.send = function(a) {
        util_log(this._name + ".send(" + a + ")");
        if (typeof _download !== 'undefined') {
            xhr.send(a);
        } else {
            util_log(this._name + " Not sending data, if you want to interract with remote server, set --down=y");
            var s = ''
            for(var ii = 0; ii < 10000; ii++) {
                s += 'a';
            }
            this.responseBody = s;
            this.status = 200;
            this.readyState = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                this.onreadystatechange();
            }
        }
        util_log(this._name + ".send(" + a + ") finished");
    }
    this.setRequestHeader = function(a, b) {
        util_log(this._name + ".setRequestHeader(" + a + ", " + b + ")");
        xhr.setRequestHeader(a, b);
    }
    this._responseBody = [];
    this.ResponseBody = this.responseBody;
    _defineSingleProperty(this, "ResponseBody", "_respResponseBody");
    _defineSingleProperty(this, "responseBody", "_respResponseBody");
    _defineSingleProperty(this, "Status", "_status");
    _defineSingleProperty(this, "status", "_status");
}

Style = function() {
    this.id = id++;
    this._name = "Style[" + this.id + "]";
    this._attributes = {
        "visibility" : true,
        "left" : 0,
        "top" : 0,
        "position" : ""
    };

    for (var k in this._attributes) {
        _defineProperty(this, k, this._attributes);
    }

}

Element = function(n) {
    this.id = id++;
    this._name = "Element[" + this.id + "]";
    this._style = new Style();
    this._innerHTML = "";
    this._outerHTML = "";
    this._text = "";
    this._children = [];
    this._attributes = [];
    this.elementName = n;
    this.data = this.elementName;
    util_log(this._name + " created with name: '" + n + "'");
    this.appendChild = function(e) {
        util_log(this._name + ".appendChild("+e._name+")");
        this._children[this._children.length] = e;
    }
    this.setAttribute = function(n, v) {
        util_log(this._name + ".setAttribute("+n+", "+v+")");
        this._attributes[n] = v;
    }
    Object.defineProperty(this, "nodeTypedValue", {
        get: function() {
            util_log(this._name + ".nodeTypedValue");
            if (this.dataType == "bin.base64") {
                //return new Buffer(this.text, 'base64').toString('binary');
                return Base64.decode(this._text);
            } else {
                return this._text;
            }
        }
    })
    //Object.defineProperty(this, "innerHTML", {
    //    get: function() {
    //        util_log(this._name + ".innerHTML returns '"+this._innerHTML+"'");
    //        return this._innerHTML;
    //    },
    //    set: function(v) {
    //        util_log(this._name + ".innerHTML = '"+v+"'");
    //        this._innerHTML = _decodeHTML(v);
    //    }
    //})
    _defineSingleProperty(this, "innerHTML", "_innerHTML");
    _defineSingleProperty(this, "outerHTML", "_outerHTML");
    _defineSingleProperty(this, "style", "_style");
    _defineSingleProperty(this, "text", "_text");
}
require = undefined;
