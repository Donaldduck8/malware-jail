/*
    wscript.js - simulates WScript (Windows scripting host) environment
*/

util_log("Preparing sandbox to emulate WScript environment.");
_wscript_saved_files = {};
_wscript_urls = [];
_wscript_objects = [];
var _my_path = require('path');

var Date = _date;

Object.defineProperty(Error.prototype, "number", {
    get: function() {
        ret = parseInt(this.message);
        util_log("Error.number => " + ret);
        return ret;
    }
});

var Base64 = {
    // Source: http://jsfiddle.net/gabrieleromanato/qaght/
    // and: http://stackoverflow.com/questions/246801/how-can-you-encode-a-string-to-base64-in-javascript#246813

    _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

    encode: function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i < input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

        }

        return output;
    },

    decode: function(input) {
        var output = "";
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        while (i < input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

        }

        output = Base64._utf8_decode(output);

        return output;

    },

    _utf8_encode: function(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    },

    _utf8_decode: function(utftext) {
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            } else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            } else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }

        }

        return string;
    }
};

TextStream = function(filename) {
    this.id = id++;
    this._name = "TextStream[" + this.id + "]";
    this._filename = filename;
    this._content = "";
    util_log("new " + this._name);
    this.writeline = function(s) {
        util_log(this._name + ".WriteLine(...)");
        this._content += s;
        _wscript_saved_files[this._filename] = this._content;
    }
    this.write = function(s) {
        util_log(this._name + ".Write(" + s + ")");
        this._content += s;
        _wscript_saved_files[this._filename] = this._content;
    }
    this.readall = function() {
        util_log(this._name + ".ReadAll()");
        return "readall";
    }
    this.close = function() {
        util_log(this._name + ".Close()");
    }
};
TextStream.toString = () => {return "TextStream"}

FileSystemObject = function() {
    this._pw32 = _my_path.win32;
    this.id = id++;
    this._name = "Scripting.FileSystemObject[" + this.id + "]";
    util_log("new " + this._name);
    this.createtextfile = function(filename) { //(filename[, overwrite[, unicode]])
        util_log(this._name + ".CreateTextFile(" + filename + ")");
        return _proxy(new TextStream(filename));
    }
    this.opentextfile = function(filename) { //(filename[, iomode[, create[, format]]])
        util_log(this._name + ".OpenTextFile(" + filename + ")");
        return _proxy(new TextStream(filename));
    }
    this.getfileversion = function(f) {
        util_log(this._name + ".GetFileVersion(" + f + ")");
        return "1.0";
    }
    this.buildpath = function() {
        util_log(this._name + ".BuildPath(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        return Array.prototype.slice.call(arguments, 0).join("\\");
    }
    this.fileexists = function(f) {
        var ret = false;
        var abs = this._pw32.isAbsolute(f);
        if (!abs)
            util_log("FIXME: " + this._name + ".FileExists(" + f + ") - relative path");
        var parts = this._pw32.normalize(f).split(this._pw32.sep);
        var t = FS;
        for(let p of parts) {
            if (p === "")
                continue;
            t = t[p.toUpperCase()]; 
            if (typeof t === "undefined")
                break;
        } 
        if (typeof t !== "undefined")
            ret = true;
        util_log(this._name + ".FileExists(" + f + ") => " + ret);
        return ret;
    }
    this.folderexists = function(f) {
        var ret = false;
        var abs = this._pw32.isAbsolute(f);
        if (!abs)
            util_log("FIXME: " + this._name + ".FolderExists(" + f + ") - relative path");
        var parts = this._pw32.normalize(f).split(this._pw32.sep);
        var t = FS;
        for(let p of parts) {
            if (p === "")
                continue;
            t = t[p.toUpperCase()]; 
            if (typeof t === "undefined")
                break;
        } 
        if (typeof t !== "undefined")
            ret = true;
        util_log(this._name + ".FolderExists(" + f + ") => " + ret);
        return ret;
    }
    this.deletefile = function(f) {
        util_log(this._name + ".DeleteFile(" + f + ")");
        return true;
    }
    this.copyfile = function(f1, f2) {
        util_log(this._name + ".CopyFile(" + f1 + ", "+ f2 + ")");
        return true;
    }
    this.getfolder = function(d) {
        d1 = this._pw32.normalize(d);
        util_log(this._name + ".GetFolder(" + d + ") => " + d1);
        return _proxy(new FolderObject(d1));
    }
    this.deletefolder = function(d) {
        util_log(this._name + ".DeleteFolder(" + d + ")");
    }
    this.createfolder = function(f) {
        util_log(this._name + ".CreateFolder(" + f + ")");
        var abs = this._pw32.isAbsolute(f);
        if (!abs)
            util_log("FIXME: " + this._name + ".CreateFolder(" + f + ") - relative path");
        var parts = this._pw32.normalize(f).split(this._pw32.sep);
        var t = FS;
        for(let p of parts) {
            if (p === "")
                continue;
            if (p.toUpperCase() in t)
                t = t[p.toUpperCase()]; 
            else {
                t = t[p.toUpperCase()] = {};
            };
        }
        return _proxy(new FolderObject(f));
    }
    this.getspecialfolder = function(f) {
        switch(""+f) {
            case "0":
                fn = ENV["WINDIR"]; //"WindowsFolder";
                break;
            case "1":
                fn = ENV["SYSTEMDIRECTORY"]; //"SystemFolder";
                break;
            case "2":
                fn = ENV["TEMP"]; //TempFolder;
                break;
            default:
                fn = "UnknownType["+f+"]";
                break;
        }
        util_log(this._name + ".GetSpecialFolder(" + f + ") => " + fn + "/");
        return fn+"/";
    }
    this.gettempname = function() {
        var fn = "TempFile["+ id++ +"]";
        util_log(this._name + ".GetTempName() => " + fn);
        return fn;
    }
};
FileSystemObject.toString = () => { return "FileSystemObject" }

// FIXME : create dummy filesystem structure to be able to answer Folder/FileExists

var FS = { 
    "C:" : {
        "PROGRAMDATA" : {},
        "PROGRAM FILES" : {
            "COMMON FILES" : {}
        },
        "PROGRAM FILES (X86)" : {
            "COMMON FILES" : {}
        },
        "USERS" : {
            "USER" : {
                "APPDATA" : {
                    "LOCAL" : {
                        "TEMP": {}
                    },
                    "ROAMING" : {},
                    "LOCALLOW" : {}
                },
                "DESKTOP" : {}
            },
            "DEFAULT" : {
                "APPDATA" : {
                    "LOCAL" : {
                        "TEMP": {}
                    },
                    "ROAMING" : {},
                    "LOCALLOW" : {}
                },
                "DESKTOP" : {}
            },
            "PUBLIC" : {
                "APPDATA" : {
                    "LOCAL" : {
                        "TEMP": {}
                    },
                    "ROAMING" : {},
                    "LOCALLOW" : {}
                },
                "DESKTOP" : {}
            }
        },
        "WINDOWS" : {
            "SYSTEM32" : {
                "DRIVERS" : {
                    "ETC" : {
                        "SERVICES" : "FILE CONTENT"
                    }
                }
            }
        }
    }
};

var ENV = {
    "ALLUSERSPROFILE" : "C:\\ProgramData",
    "APPDATA" : "C:\\Users\\User\\AppData\\Roaming",
    "COMMONPROGRAMFILES" : "C:\\Program Files\\Common Files",
    "COMMONPROGRAMFILES(X86)" : "C:\\Program Files (x86)\\Common Files",
    "COMMONPROGRAMW6432" : "C:\\Program Files\\Common Files",
    "COMPUTERNAME" : "COMPUTER",
    "COMSPEC" : "C:\\WINDOWS\\system32\\cmd.exe",
    "FPS_BROWSER_APP_PROFILE_STRING" : "Internet Explorer",
    "FPS_BROWSER_USER_PROFILE_STRING" : "Default",
    "FP_NO_HOST_CHECK" : "NO",
    "HOMEDRIVE" : "C:",
    "HOMEPATH" : "\\Users\\User",
    "LANG" : "EN",
    "LOCALAPPDATA" : "C:\\Users\\User\\AppData\\Local",
    "LOGONSERVER" : "\\\\COMPUTER",
    "NUMBER_OF_PROCESSORS" : "4",
    "OS" : "Windows_NT",
    "PATH" : "C:\\Users\\User\\AppData\\Roaming\\npm;C:\\Program Files\\nodejs\\;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Lenovo\\Fingerprint Manager Pro\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\dotnet\\;C:\\Tcl\\bin;C:\\Program Files (x86)\\Nmap;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Users\\User\\AppData\\Roaming\\npm;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Program Files (x86)\\Intel\\iCLS Client\\;C:\\Program Files\\Intel\\iCLS Client\\;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Lenovo\\Fingerprint Manager Pro\\;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\DAL;C:\\Program Files (x86)\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Intel\\Intel(R) Management Engine Components\\IPT;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files (x86)\\Bitvise SSH Client;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\Skype\\Phone\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\Binn\\ManagementStudio\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\DTS\\Binn\\;C:\\Program Files\\Microsoft SQL Server\\130\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\110\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft SQL Server\\130\\DTS\\Binn\\;C:\\Program Files (x86)\\Microsoft Emulator Manager\\1.0\\;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;C:\\Program Files\\nodejs\\;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\dotnet\\;C:\\Users\\User\\AppData\\Local\\Microsoft\\WindowsApps;",
    "PATHEXT" : ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC",
    "PROCESSOR_ARCHITECTURE" : "AMD64",
    "PROCESSOR_IDENTIFIER" : "Intel64 Family 6 Model 61 Stepping 4, GenuineIntel",
    "PROCESSOR_LEVEL" : "6",
    "PROCESSOR_REVISION" : "3d04",
    "PROGRAMDATA" : "C:\\ProgramData",
    "PROGRAMFILES" : "C:\\Program Files",
    "PROGRAMFILES(X86)" : "C:\\Program Files (x86)",
    "PROGRAMW6432" : "C:\\Program Files",
    "PROMPT" : "$P$G",
    "PSMODULEPATH" : "C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\;C:\\Program Files (x86)\\Microsoft SQL Server\\120\\Tools\\PowerShell\\Modules\\;C:\\Program Files\\WindowsPowerShell\\Modules\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ResourceManager\\AzureResourceManager\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\ServiceManagement\\;C:\\Program Files (x86)\\Microsoft SDKs\\Azure\\PowerShell\\Storage\\",
    "PUBLIC" : "C:\\Users\\Public",
    "SESSIONNAME" : "Console",
    "SYSTEMDRIVE" : "C:",
    "SYSTEMROOT" : "C:\\WINDOWS",
    "TEMP" : "C:\\Users\\User\\AppData\\Local\\Temp",
    "TMP" : "C:\\Users\\User\\AppData\\Local\\Temp",
    "USERDOMAIN" : "COMPUTER",
    "USERDOMAIN_ROAMINGPROFILE" : "COMPUTER",
    "USERNAME" : "User",
    "USERPROFILE" : "C:\\Users\\User",
    "WINDIR" : "C:\\WINDOWS",
    "SYSTEMDIRECTORY" : "C:\\WINDOWS\\System32"
};

FolderObject = function(d, p = "", l = 1) {
    this.id = id++;
    this._pw32 = _my_path.win32;
    this._name = "FolderObject[" + this.id + "]("+d+")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "name", "_folder_name");
    _defineSingleProperty(this, "parentfolder");
    //_defineSingleProperty(this, "Files");
    //_defineSingleProperty(this, "SubFolders");
    _defineSingleProperty(this, "isrootfolder");
    _defineSingleProperty(this, "attributes");
    _defineSingleProperty(this, "datecreated");
    _defineSingleProperty(this, "datelastaccessed");
    _defineSingleProperty(this, "datelastmodified");
    _defineSingleProperty(this, "drive");
    _defineSingleProperty(this, "path");
    _defineSingleProperty(this, "shortname");
    _defineSingleProperty(this, "shortpath");
    _defineSingleProperty(this, "size");
    _defineSingleProperty(this, "type");
    var a = this._pw32.parse(d);

    this.name = d;
    this.parentfolder = this._pw32.join(d, "..");
    Object.defineProperty(this, "files", {
        get: function() {
            var ret = [];
            var f = this.name;
            var abs = this._pw32.isAbsolute(f);
            if (!abs)
                util_log("FIXME: " + this._name + ".Files.get() - relative path");
            var parts = this._pw32.normalize(f).split(this._pw32.sep);
            var t = FS;
            for(let p of parts) {
                if (p === "")
                    continue;
                t = t[p.toUpperCase()];
            }
            if (typeof t !== "undefined") {
                for(var p1 in t) {
                    ret[ret.length] = this._pw32.join(this.Name, p1);
                }
            }
            util_log(this._name + ".Files.get() => ("+ typeof ret +") '"+_truncateOutput(ret)+"'");
            return ret;
        }
    });
    Object.defineProperty(this, "subfolders", {
        get: function() {
            var f = this.name;
            var ret = [];
            var abs = this._pw32.isAbsolute(f);
            if (!abs)
                util_log("FIXME: " + this._name + ".Files.get() - relative path");
            var parts = this._pw32.normalize(f).split(this._pw32.sep);
            var t = FS;
            for(let p of parts) {
                if (p === "")
                    continue;
                t = t[p.toUpperCase()];
            }
            if (typeof t !== "undefined") {
                for(var p1 in t) {
                    ret[ret.length] = this._pw32.join(this.name, p1);
                }
            }
            util_log(this._name + ".SubFolders.get() => ("+ typeof ret +") '"+_truncateOutput(ret)+"'");
            return ret;
        }
    });

    this.toString = function() {
        return this._name;
    }
};
FolderObject.toString = () => { return "FolderObject" }

FileObject = function(d) {
    this.id = id++;
    this._name = "FileObject[" + this.id + "]("+d+")";
    util_log("new " + this._name);
    this.toString = function() {
        return this._name;
    }
};
FileObject.toString = () => { return "FileObject" }

Enumerator = _proxy(function(a) {
    this.id = id++;
    this._enum = a;
    this._index = 0;
    this._name = "Enumerator[" + this.id + "]";
    util_log("new " + this._name + " for " + _truncateOutput(_inspect(a)));
    this.atend = function() {
        var r = (this._index === this._enum.length);
        //util_log(this._name + ".atEnd() => "+ r);
        return r;
    };
    this.movenext = function() {
        this._index++;
    };
    this.item = function() {
        var ret =  this._enum[this._index];
        util_log(this._name + ".item("+this._index+") => " + ret);
        return ret;
    }
});
Enumerator.toString = () => { return "Enumerator"; }
Enumerator.toJSON = () => { return "Enumerator"; }
Enumerator.prototype.toString = function() {
    return this._name;
}

WScript = _proxy({
    _name: "WScript",
    createobject: function(a) {
        util_log("WScript.CreateObject(" + a + ")");
        return create_object(a);
    },
    sleep: function(a) {
        util_log("WScript.Sleep(" + a + ")");
        var waitTill = new Date(new Date().getTime() + a);
        while(waitTill > new Date()){}
    },
    echo: function(a) {
        util_log("WScript.Echo(" + a + ")");
    },
    quit: function(a) {
        util_log("WScript.Quit(" + a + ")");
        throw "WScript.Quit()";
    },
    version: "5.812",
    //ScriptFullName: _script_name,
    toString: function() {
        util_log("WScript.toString() => 'Windows Script Host'");
        return "Windows Script Host";
    },
    toJSON: function() {
        return this.toString();
    }
})

Object.defineProperty(WScript, "scriptfullname", {
    get: function() {
        var ret = _script_name;
        util_log(this._name + ".ScriptFullName.get() => ("+ typeof ret +") '"+_truncateOutput(ret)+"'");
        return ret;
    }
})
_defineSingleProperty(WScript, "arguments");
WScript.Arguments = {"ss": "aaaa"};

function create_object(a) {
    var ret = null;
    a = a.toLowerCase();
    if (a.startsWith("winhttp.winhttprequest") ||
        a.startsWith("msxml2.serverxmlhttp")) {
        ret = _proxy(new MSXML2_XMLHTTP());
    } else if (a.startsWith("msxml2.domdocument")) {
        ret = _proxy(new Msxml2_DOMDocument_6_0());
    } else {
        switch (a) {
            case "shell.application":
                ret = _proxy(new Shell_Application());
                break;
            case "scripting.filesystemobject":
                ret = _proxy(new FileSystemObject());
                break;
            case "wscript.shell":
                ret = _proxy(new WScript_Shell());
                break;
            case "adodb.stream":
                ret = _proxy(new ADODB_Stream());
                break;
            case "msxml2.xmlhttp":
                ret = _proxy(new MSXML2_XMLHTTP());
                break;
            case "scripting.dictionary":
                ret = _proxy(new Scripting_Dictionary());
                break;
            case "msscriptcontrol.scriptcontrol":
                ret = _proxy(new MSScriptControl_ScriptControl());
                break;
            default:
                util_log(">>> FIXME: WScript.CreateObject: type '" + a + "' not handled");
                ret = null;
                throw new TypeError("WScript.CreateObject: Could not locate automation class named " + a);
                break;
        }
    }
    _wscript_objects[_wscript_objects.length] = ret;
    return ret;
}
create_object.toString = () => { return "create_object" }

GetObject = function(a, b) {
    util_log("GetObject(" + a + ", " + b + ")");
    return _proxy(new AutomationObject(a, b));
}
GetObject.toString = () => { return "GetObject" }

AutomationObject = function(a, b) {
    this.id = id++;
    this._name = "AutomationObject[" + this.id + "]("+a+", "+b+")";
    util_log("new " + this._name);
    this.execquery = function() {
        var a = Array.prototype.slice.call(arguments, 0).join(",");
        util_log(this._name + ".ExecQuery(" + a + ")");
        if (arguments[0].toUpperCase() === "SELECT * FROM WIN32_OPERATINGSYSTEM") {
            var ret = [{
                "BOOTDEVICE" : "\\Device\\HarddiskVolume1",
                "BUILDNUMBER" : "14393",
                "BUILDTYPE" : "Multiprocessor Free",
                "CAPTION" : "Microsoft Windows 10 Pro",
                "CODESET" : "1250",
                "COUNTRYCODE" : "420",
                "CREATIONCLASSNAME" : "Win32_OperatingSystem",
                "CSCREATIONCLASSNAME" : "Win32_ComputerSystem",
                "CSDVERSION" : "null",
                "CSNAME" : "CARBON",
                "CURRENTTIMEZONE" : "60",
                "DATAEXECUTIONPREVENTION_32BITAPPLICATIONS" : "true",
                "DATAEXECUTIONPREVENTION_AVAILABLE" : "true",
                "DATAEXECUTIONPREVENTION_DRIVERS" : "true",
                "DATAEXECUTIONPREVENTION_SUPPORTPOLICY" : "2",
                "DEBUG" : "false",
                "DESCRIPTION" : "Carbon",
                "DISTRIBUTED" : "false",
                "ENCRYPTIONLEVEL" : "256",
                "FOREGROUNDAPPLICATIONBOOST" : "2",
                "FREEPHYSICALMEMORY" : "4095708",
                "FREESPACEINPAGINGFILES" : "1192496",
                "FREEVIRTUALMEMORY" : "4011584",
                "INSTALLDATE" : "9/4/2016 03:00:28",
                "LARGESYSTEMCACHE" : "null",
                "LASTBOOTUPTIME" : "10/30/2016 00:06:03",
                "LOCALDATETIME" : "11/1/2016 00:30:15",
                "LOCALE" : "0405",
                "MANUFACTURER" : "Microsoft Corporation",
                "MAXNUMBEROFPROCESSES" : "-1",
                "MAXPROCESSMEMORYSIZE" : "137438953344",
                "NAME" : "Microsoft Windows 10 Pro|C:\\WINDOWS|\\Device\\Harddisk0\\Partition2",
                "NUMBEROFLICENSEDUSERS" : "null",
                "NUMBEROFPROCESSES" : "153",
                "NUMBEROFUSERS" : "2",
                "ORGANIZATION" : "",
                "OSLanguage" : "0409", /* "1033", */
                "OSPRODUCTSUITE" : "256",
                "OSTYPE" : "18",
                "OTHERTYPEDESCRIPTION" : "null",
                "PLUSPRODUCTID" : "null",
                "PLUSVERSIONNUMBER" : "null",
                "PRIMARY" : "true",
                "PRODUCTTYPE" : "1",
                "QUANTUMLENGTH" : "undefined",
                "QUANTUMTYPE" : "undefined",
                "REGISTEREDUSER" : "Uzivatel",
                "SERIALNUMBER" : "00330-80000-00000-AA676",
                "SERVICEPACKMAJORVERSION" : "0",
                "SERVICEPACKMINORVERSION" : "0",
                "SIZESTOREDINPAGINGFILES" : "1245184",
                "STATUS" : "OK",
                "SUITEMASK" : "272",
                "SYSTEMDEVICE" : "\\Device\\HarddiskVolume2",
                "SYSTEMDIRECTORY" : "C:\\WINDOWS\\system32",
                "SYSTEMDRIVE" : "C:",
                "TOTALSWAPSPACESIZE" : "null",
                "TOTALVIRTUALMEMORYSIZE" : "9306340",
                "TOTALVISIBLEMEMORYSIZE" : "8061156",
                "version" : "10.0.14393",
                "windowsdirectory" : "C:\\WINDOWS"
            }];
            return ret;
        }
    }
}
AutomationObject.toString = () => { return "AutomationObject"; }

MSScriptControl_ScriptControl = function() {
    this.id = id++;
    this._name = "MSScriptControl.ScriptControl[" + this.id + "]";
    util_log("new " + this._name);
    _defineSingleProperty(this, "Language");
    _defineSingleProperty(this, "Timeout");
    this.addcode = function(a) {
        util_log(this._name + ".AddCode(" + a + ")");
    }
    this.addobject = function(a, b) {
        util_log(this._name + ".AddObject(" + a + ", " + b + ")");
    }
}
MSScriptControl_ScriptControl.toString = () => { return "MSScriptControl_ScriptControl" }

Scripting_Dictionary = function() {
    this.id = id++;
    this._name = "Scripting.Dictionary[" + this.id + "]";
    util_log("new " + this._name);
    this._dict = {};
    this.add = function(a, b) {
        util_log(this._name + ".add(" + a + ", " + b + ")");
        this._dict[a] = b;
    }
    this.item = function(a) {
        util_log(this._name + ".Item(" + a + ")");
        return this._dict[a];
    }
    this.items = function() {
        util_log(this._name + ".Item()");
        return this._dict;
    }
}
Scripting_Dictionary.toString = () => { return "Scripting_Dictionary" }

ActiveXObject = function(a) {
    util_log("ActiveXObject(" + a + ")");
    return create_object(a);
};
ActiveXObject.toString = () => { return "ActiveXObject" }

Shell_Application = function() {
    this.id = id++;
    this._name = "Shell.Application[" + this.id + "]";
    util_log("new " + this._name);
    this.namespace = function(a) {
        util_log(this._name + ".Namespace(" + a + ")");
    }
    this.shellexecute = function(a, b, c, d, e) {
        util_log(this._name + ".ShellExecute(" + a + ", " + b + ", " + c + ", " + ", " + d + ", " + e + ")");
    }
}
Shell_Application.toString = () => { return "Shell_Application" }

var REG = {
    "HKLM\\SOFTWARE\\MICROSOFT\\WINDOWS NT\\CURRENTVERSION\\PRODUCTID" : "00330-80000-00000-AA676", /* Windows 10 64bit */
    "HKLM\\SOFTWARE\\CLASSES\\MIME\\DATABASE\\RFC1766\\1034" : "en-us;@%SystemRoot%\system32\mlang.dll,-4386",
    "HKLM\\SOFTWARE\\CLASSES\\MIME\\DATABASE\\RFC1766\\0409" : "en-us;@%SystemRoot%\system32\mlang.dll,-4386",
    "eee" : ""
}

WScript_Shell = function() {
    this.id = id++;
    this._name = "WScript.Shell[" + this.id + "]";
    util_log("new " + this._name);
    this.expandenvironmentstrings = function(a) {
        util_log(this._name + ".ExpandEnvironmentStrings(" + a + ")");
        return a;
    };
    this.run = function(a, b, c) {
        util_log(this._name + ".Run(" + a + ", " + b + ", " + c + ")");
    }
    this.exec = function(a) {
        util_log(this._name + ".Exec(" + a + ")");
    }
    this.regwrite = function(a, b, c) {
        util_log(this._name + ".RegWrite(" + a + ", " + b + ", " + c + ")");
        REG[a] = b;
    }
    this.regread = function(a) {
        var ret = "" + REG[a.toUpperCase()];
        if (ret === "undefined") {
            util_log("FIXME: " + this._name + ".RegRead(" + a + ") - unknown key");
        }
        util_log(this._name + ".RegRead(" + a + ") => " + ret);
        return ret;
    }
    this.environment = function(a) {
        util_log(this._name + ".Environment(" + a + ")");
        return WshEnvironment(a);
    }
    this.specialfolders = function(a) {
        util_log("WScript.SpecialFolders(" + a + ")");
        return a+"/";
    }
    this.createshortcut = function(a) {
        a = _truncateOutput(a);
        util_log("WScript.CreateShortcut(" + a + ")");
        return _proxy(new WshShortcut(a));
    }
    this.tostring = function() {
        return this._name;
    }
};
WScript_Shell.toString = () => { return "WScript_Shell" }
Shell = WScript_Shell;


// WshEnvironment(a) where a can be PROCESS, SYSTEM, USER and VOLATILE
// PROCESS     TEMP=C:\DOCUME~1\You\LOCALS~1\Temp
// SYSTEM      TEMP=%SystemRoot%\TEMP
// USER        TEMP=%USERPROFILE%\Local Settings\Temp
// VOLATILE    TEMP=
WshEnvironment = function(a) {
    var _id = id++;
    var _type = a.toUpperCase();
    var _name = "WshEnvironment[" + _id + "](" + _type + ")";
    util_log("new " + _name);
    var _env = {
        "PROCESS": {
            "USERNAME" : "MY_USER",
            "COMPUTERNAME" : "MY_COMPUTER",
            "SYSTEMDRIVE" : "C:\\",
            "SYSTEMROOT" : "C:\\WinNT",
            "PATH" : "C:\\",
            "USERPROFILE" : "C:\\Users\\User1"
        },
        "SYSTEM": {

        },
        "USER": {

        },
        "VOLATILE": {

        }
    }
    function b(x) {
        x = x.toUpperCase();
        var r = x;
        try {
            //r = _env[_type][x];
            r = ENV[x];
        } catch(e) {}
        if (typeof r === "undefined") {
            util_log("FIXME: " +_name + "(" + x + ") undefined variable ");
            r = x;
        }
        util_log(_name + "(" + x + ") => " + r);
        return r;
    }
    b.item = function(x) {
        util_log(_name + ".Item(" + x + ")");
        return "itemvalue";
    }
    return b;
};
WshEnvironment.toString = () => { return "WshEnvironment" }

WshShortcut = function(a) {
    this.id = id++;
    this._link = a;
    this._name = "WshShortcut[" + this.id + "](" + this._link + ")";
    util_log("new " + this._name);
    _defineSingleProperty(this, "arguments");
    _defineSingleProperty(this, "fullname", "_link");
    _defineSingleProperty(this, "targetpath");
    _defineSingleProperty(this, "windowstyle");
    _defineSingleProperty(this, "hotkey");
    _defineSingleProperty(this, "iconlocation");
    _defineSingleProperty(this, "description");
    _defineSingleProperty(this, "workingdirectory");
    this.save = function() {
        util_log(this._name + ".save()");
    }
    //this[Symbol.unscopables] = _proxy({})
};
WshShortcut.toString = () => { return "WshShortcut" }

ADODB_Stream = function() {
    this.id = id++;
    this._name = "ADODB_Stream[" + this.id + "]";
    util_log("new " + this._name);

    this.open = function() {
        util_log(this._name + ".Open()");
    }
    this._type = 0;
    this._position = 0;
    this._size = 0;
    this._content = '';
    this._charset = undefined;

    this.write = function(a) {
        this.content = a;
        if (typeof a === 'undefined')
            util_log(this._name + ".Write(undefined) - Error ?");
        else {
            util_log(this._name + ".Write(str) - " + a.length + " bytes");
            this.size = a.length
        }
    }
    this.writetext = function(a) {
        var encoding = 'binary'
        if (typeof a === 'undefined')
            util_log(this._name + ".WriteText(undefined) - Error ?");
        else {
            if (this.type == 2 && typeof this.charset !== 'undefined') {
                this.content = _iconv.encode(a, this.charset);
                encoding = this.charset;
            } else {
                this.content = a;
            }
            util_log(this._name + ".WriteText(str) - " + a.length + " bytes, encoding: "+encoding);
            this.size = this.content.length
        }
    }
    this.savetofile = function(a, b) {
        util_log(this._name + ".SaveToFile(" + a + ", " + b + ")");
        _wscript_saved_files[a] = this.content;
    }
    this.loadfromfile = function(a) {
        var encoding = 'binary';
        //util_log(this._name + ".LoadFromFile(" + a + ")");
        if (this.type == 2 && typeof this.charset !== 'undefined') {
            //util_log("here");
            this.content = _iconv.decode(_wscript_saved_files[a], this.charset);
            encoding = this.charset;
        } else {
            this.content =  _wscript_saved_files[a];
        }
        util_log(this._name + ".LoadFromFile(" + a + ") " + this.content.length + " bytes, encoding: "+encoding);
        this.Position = 0;
    }
    //this.ReadText = function(a) {
    //    util_log(this._name + ".ReadText(" + a + ")");
    //    if (typeof a === "undefined" || a == adReadAll) {
    //        return "aa";
    //    } else if (a == adReadLine) {
    //        return "aa";
    //    } else if (a > 0) {
    //        return this.content.slice(this.Position, this.Position+a);
    //    } else {
    //        return this.content;
    //    }
    //}
    //this.readText = this.ReadText;
    this.close = function() {
        util_log(this._name + ".Close()");
    }
    _defineSingleProperty(this, "charset", "_charset");
    _defineSingleProperty(this, "readtext", "_content");
    _defineSingleProperty(this, "content", "_content");
    _defineSingleProperty(this, "type", "_type");
    _defineSingleProperty(this, "position", "_position");
    _defineSingleProperty(this, "size", "_size");
};
//ADODB_Stream.prototype = Object.create(Object.prototype);
//ADODB_Stream.prototype.constructor = ADODB_Stream;
ADODB_Stream.toString = ADODB_Stream.toJSON = () => { return "ADODB_Stream" }

Msxml2_DOMDocument_6_0 = function() {
    this.id = id++;
    this._name = "Msxml2.DOMDocument.6.0[" + this.id + "]";
    util_log("new " + this._name);
    this.createelement = function(a) {
        util_log(this._name + ".createElement(" + a + ")");
        return new Element(a);
    }
};
Msxml2_DOMDocument_6_0.toString = () => { return "Msxml2_DOMDocument_6_0" }

MSXML2_XMLHTTP = function() {
    this.id = id++;
    this._name = "MSXML2.XMLHTTP[" + this.id + "]";
    var xhr = new _XMLHttpRequest();
    util_log("new " + this._name);
    var self = this;
    this._status = 0;

    _defineSingleProperty(this, "allResponseHeaders");
    xhr.onreadystatechange = (function(that) {
        return function() {
            var len = (xhr.responseText && xhr.responseText.length)?xhr.responseText.length:0;
            util_log(that._name + ".onreadystatechange(), readyState = " + xhr.readyState + " length: " +
                 len + " status: " + xhr.status);
            util_log(that._name + ".statusText = " + JSON.stringify(xhr.statusText));
            that.statustext = xhr.statusText;
            that.readystate = xhr.readyState;
            that.responsebody = xhr.responseText;
            that.status = xhr.status;
            that.allResponseHeaders = xhr.getAllResponseHeaders();
            if (that.onreadystatechange) {
                that.onreadystatechange();
                util_log(that._name + ".onreadystatechange() finished");
            } else {
                util_log(that._name + ".onreadystatechange() undefined");
            }
        }
    })(this)

    this.open = function(m, u, a) {
        u = u.replace(/\r|\n/g, "");
        util_log(this._name + ".open(" + m + "," + u + "," + a + ")");
        switch((""+a).toLowerCase()) {
            case "false":
            case "no":
            case "0":
            case "":
            case "undefined":
            case null:
                this.async = false; 
                break;
            default: 
                this.async = true;
        } 
        _wscript_urls[_wscript_urls.length] = u;
        xhr.open(m, u, this.async);
    }
    this.close = function() {
        util_log(this._name + ".close()");
        xhr.close();
    }
    this.getallresponseheaders = function() {
        var ret = this.allResponseHeaders;
        util_log(this._name + ".getAllResponseHeaders() => " + _inspect(ret));
        return ret;
    }
    this.send = function(a) {
        util_log(this._name + ".send(" + a + ")");
        if (typeof _download !== 'undefined') {
            xhr.send(a);
        } else {
            util_log(this._name + " Not sending data, if you want to interact with remote server, set --down=y");
            var s = ''
            for(var ii = 0; ii < 200; ii++) {
                s += 'Dumy conntent, use --down=y to download the real payload.\n';
            }
            this.responsebody = s;
            this.status = 200;
            this.readystate = 4;
            if (this.onreadystatechange) {
                util_log(this._name + " Calling onreadystatechange() with dummy data");
                this.onreadystatechange();
            }
        }
        util_log(this._name + ".send(" + a + ") finished");
    }
    this.setrequestheader = function(a, b) {
        util_log(this._name + ".setRequestHeader(" + a + ", " + b + ")");
        xhr.setRequestHeader(a, b);
    }
    this._responseBody = [];
    _defineSingleProperty(this, "responsebody", "_responseBody");
    _defineSingleProperty(this, "status", "_status");
    _defineSingleProperty(this, "async");
    _defineSingleProperty(this, "readystate");
    _defineSingleProperty(this, "statustext");
    Object.defineProperty(this, "responsetext", {
        get: function() {
            var ret = "" + this._responseBody;
            util_log(this._name + ".ResponseText.get() => ("+ typeof ret +") '"+_truncateOutput(ret)+"'");
            return ret;
        },
        set: function(v) {
            util_log(this._name + ".ResponseText = ("+ typeof v + ") '"+_truncateOutput(v)+"'");
            this.responseBody = v;
        }
    });

}
MSXML2_XMLHTTP.toString = () => { return "MSXML2_XMLHTTP" }

Style = function() {
    this.id = id++;
    this._name = "Style[" + this.id + "]";
    this._attributes = {
        "visibility" : true,
        "left" : 0,
        "top" : 0,
        "position" : "",
        "stylesheet" : {
            cssText: ""
        }
    };

    for (var k in this._attributes) {
        _defineProperty(this, k, this._attributes);
    }

}
Style.toString = () => { return "Style" }

Node = _proxy(function() {
    _name : "Node"
})
Node.prototype = Object.create(Object.prototype);
Node.prototype.constructor = Node;
Node.toString = Node.toJSON = () => { return "Node" }


Element = _proxy(function(n) {
    Node.call(this, "Element");
    this._id = id++;
    this._name = "Element[" + this._id + "]";
    this._style = _proxy(new Style());
    this._innerHTML = "";
    this._outerHTML = "";
    this._text = "";
    this._children = [];
    this._attributes = [];
    this.elementName = n;
    this.data = this.elementName;
    util_log(this._name + " created, named: '" + n + "'");
    this.toString = function() {
        return this._name;
    }
    this.appendchild = function(e) {
        util_log(this._name + ".appendChild("+e._name+")");
        if (this._children.length == 0) {
            util_log(this._name + ".firstChild set");
            this.firstChild = e;
        }
        this._children[this._children.length] = e;
        e.parentNode = this;
        return e;
    }
    this.removechild = function(e) {
        util_log(this._name + ".removeChild("+e._name+") - dummy");
        return e;
    }
    this.setattribute = function(n, v) {
        util_log(this._name + ".setAttribute("+n+", "+v+")");
        this._attributes[n] = v;
    }
    Object.defineProperty(this, "nodetypedvalue", {
        get: function() {
            util_log(this._name + ".nodeTypedValue");
            if (this.dataType == "bin.base64") {
                //return new Buffer(this.text, 'base64').toString('binary');
                return Base64.decode(this._text);
            } else {
                return this._text;
            }
        }
    })
    //Object.defineProperty(this, "innerHTML", {
    //    get: function() {
    //        util_log(this._name + ".innerHTML returns '"+this._innerHTML+"'");
    //        return this._innerHTML;
    //    },
    //    set: function(v) {
    //        util_log(this._name + ".innerHTML = '"+v+"'");
    //        this._innerHTML = _decodeHTML(v);
    //    }
    //})
    _defineSingleProperty(this, "innerhtml", "_innerHTML");
    _defineSingleProperty(this, "outerhtml", "_outerHTML");
    _defineSingleProperty(this, "style", "_style");
    _defineSingleProperty(this, "text", "_text");
    _defineSingleProperty(this, "id", "_id");
});
Element.prototype = Object.create(Node.prototype);
Element.prototype.constructor = Element;
Element.toString = Element.toJSON = () => { return "Element" }

HTMLElement.prototype = Object.create(Element.prototype);
HTMLElement.prototype.constructor = _proxy(HTMLElement);

function HTMLElement(n) {
    Element.call(this, n);
}
HTMLElement.toString = () => { return "HTMLElement" }

HTMLIFrameElement.prototype = Object.create(HTMLElement.prototype);
HTMLIFrameElement.prototype.constructor = _proxy(HTMLIFrameElement);
function HTMLIFrameElement() {
    util_log("new HTMLIFrameElement() start");
    HTMLElement.call(this, "iframe");
    this.contentdocument = new Document();
    this.contentwindow = {
        document: this.contentDocument
    }
    util_log("new HTMLIFrameElement() end");
}
HTMLIFrameElement.toString = () => { return "HTMLIFrameElement" }

require = undefined;
