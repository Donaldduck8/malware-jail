/*
    browser.js - simulates web browser like environment
*/

util_log("Preparing sandbox to emulate Browser environment (default = IE11).");
_browser_documents = [];

location = {
    _name : "location",
    _props : {
        "href" : "http://example.com/"
    },
    replace: function(n) {
        util_log(this._name + ".replace("+n+")");
        this._props["href"] = n;
    }
}
for (var k in location._props) {
    _defineProperty(location, k, location._props);
}

window = new function() {
    this.id = id++;
    this._name = "window[" + this.id + "]";
    util_log("Created: " + this._name);
    this._props = {
        "userAgent" : "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko",
        "chrome" : false,
        "vendor" : "Microsoft"
    };
    for (var k in this._props) {
        _defineProperty(this, k, this._props);
    }
    this.eval = eval;
    this.setInterval = function() {
        util_log(this._name + ".setInterval(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
        util_log(typeof arguments[0]);
        arguments[0].apply(this, Array.prototype.slice.call(arguments, 1));
    }

    this.clearInterval = function() {
        util_log(this._name + ".clearInterval(" + Array.prototype.slice.call(arguments, 0).join(",") + ")");
    }
    this.navigator = this;
    this._location = location,
    Object.defineProperty(this, "location", {
        get: function() {
            util_log("document.location.get()");
            return this._location;
        },
        set: function(n) {
            util_log("document.location.set("+n+")");
            this._location.href = n;
        }
    })
}();

setInterval = window.setInterval.bind(window);
clearInterval = window.clearInterval.bind(window);

navigator = window;


document = {
    _name : "document",
    _content : "",
    _elements : {},
    getElementsByTagName: function(n) {
        var ret = []
        util_log(this._name + ".getElementsByTagName("+n+")");
        if (n in this._elements)
            ret[0] = this._elements[n];
        else
            ret[0] =  new Element(n);
        return ret;
    },
    getElementById: function(n) {
        util_log(this._name + ".getElementById("+n+")");
        if (n in this._elements)
            return this._elements[n];
        else
            return new Element(n);
    },
    createElement: function(n) {
        util_log(this._name + ".createElement("+n+")");
        var e = new Element(n);
        this._elements[n] = e;
        return e;
    },
    createTextNode: function(n) {
        util_log(this._name + ".createTextNode("+n+")");
        return new Element(n);
    },
    write: function(c) {
        util_log(this._name + ".write(content) " + c.length + " bytes");
        util_log("=> '" + c + "'");
        _content = c;
        _browser_documents[_browser_documents.length] = c;
    },
    _addElementById: function(id, content) {
        this._elements[id] = new Element(id);
        this._elements[id].innerHTML = content;
    },
    _props : {
        "body" : undefined,
        "cookie" : ""
    },
    _location : location
}
document._props["body"] = document.createElement("body");
for (var k in document._props) {
    _defineProperty(document, k, document._props);
}

Object.defineProperty(document, "location", {
    get: function() {
        util_log("document.location.get()");
        return this._location;
    },
    set: function(n) {
        util_log("document.location.set("+n+")");
        this._location.href = n;
    }
})
