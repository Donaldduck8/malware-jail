util_log("Preparing sandbox to intercept 'new Function()' calls.");
_Function_calls = [];
if (typeof _orig_Function === 'undefined')
    _orig_Function = Function;
Function = function() {
    _Function_calls[_Function_calls.length] = Array.prototype.slice.call(arguments).join(",");
    util_log("Calling 'new Function(`"+_truncateOutput(Array.prototype.slice.call(arguments).join("`, `"))+"`)'");
    // Inject logger into the new function created
    var new_args = arguments;
    var orig_body = arguments[new_args.length-1];
    //util_log("orig: " + orig_body);
    var orig_fn = "function("+Array.prototype.slice.call(arguments, 0, -1).join(", ")+") {"+ orig_body+"}"
    var wrapped_body = "var ret = "+orig_fn+"("+Array.prototype.slice.call(arguments, 0, -1).join(", ")+"); util_log(\"Returning: '\"+ret+\"'\"); return ret;";
    //util_log("wrapped_body: " + wrapped_body);
    var used_body = wrapped_body;
    var escaped_fn = orig_fn.replace(/\"/g, "\\\"");
    var a = "util_log(`Calling " + _truncateOutput(escaped_fn) + "(`+Array.prototype.slice.call(arguments).join(\", \")+`)`);" + used_body;
    //util_log("a: " + a);
    new_args[new_args.length-1] = a;
    //util_log("args: " + Array.prototype.slice.call(new_args).join(","));
    return _orig_Function.apply(this, new_args);
}
Function.toString = () => { return "Function" }
_orig_Function.toString = () => { return "_orig_Function" }
